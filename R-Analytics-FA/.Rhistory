library(circlize)
# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/13_AdjacencyDirectedWeighted.csv", header=TRUE)
# Package
library(networkD3)
# I need a long format
data_long <- data %>%
rownames_to_column %>%
gather(key = 'key', value = 'value', -rowname) %>%
filter(value > 0)
colnames(data_long) <- c("source", "target", "value")
data_long$target <- paste(data_long$target, " ", sep="")
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(name=c(as.character(data_long$source), as.character(data_long$target)) %>% unique())
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
data_long$IDsource=match(data_long$source, nodes$name)-1
data_long$IDtarget=match(data_long$target, nodes$name)-1
# prepare colour scale
ColourScal ='d3.scaleOrdinal() .range(["#FDE725FF","#B4DE2CFF","#6DCD59FF","#35B779FF","#1F9E89FF","#26828EFF","#31688EFF","#3E4A89FF","#482878FF","#440154FF"])'
# Make the Network
sankeyNetwork(Links = data_long, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE, colourScale=ColourScal, nodeWidth=40, fontSize=13, nodePadding=20)
devtools::install_github("mattflor/chorddiag")
# devtools::install_github("mattflor/chorddiag")
library(chorddiag)
# Create dummy data
m <- matrix(c(11975,  5871, 8916, 2868,
1951, 10048, 2060, 6171,
8010, 16145, 8090, 8045,
1013,   990,  940, 6907),
byrow = TRUE,
nrow = 4, ncol = 4)
# A vector of 4 colors for 4 groups
haircolors <- c("black", "blonde", "brown", "red")
dimnames(m) <- list(have = haircolors,
prefer = haircolors)
groupColors <- c("#000000", "#FFDD89", "#957244", "#F26223")
# Build the chord diagram:
p <- chorddiag(m, groupColors = groupColors, groupnamePadding = 20)
p
# Get data:
library(gapminder)
# Charge libraries:
library(ggplot2)
library(gganimate)
install.packages("gganimate")
# Get data:
library(gapminder)
# Charge libraries:
library(ggplot2)
library(gganimate)
# Make a ggplot, but add frame=year: one image per year
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, color = continent)) +
geom_point() +
scale_x_log10() +
theme_bw() +
# gganimate specific bits:
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
# Save at gif:
anim_save("271-ggplot2-animated-gif-chart-with-gganimate1.gif")
# Get data:
library(gapminder)
# Charge libraries:
library(ggplot2)
library(gganimate)
# Make a ggplot, but add frame=year: one image per year
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, color = continent)) +
geom_point() +
scale_x_log10() +
theme_bw() +
# gganimate specific bits:
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
# Save at gif:
#anim_save("271-ggplot2-animated-gif-chart-with-gganimate1.gif")
library(ggplot2)
library(plotly)
library(gapminder)
p <- gapminder %>%
filter(year==1977) %>%
ggplot( aes(gdpPercap, lifeExp, size = pop, color=continent)) +
geom_point() +
theme_bw()
ggplotly(p)
library(plotly)
# Data: volcano is provided by plotly
# Plot
p <- plot_ly(z = volcano, type = "surface")
p
install.packages("rgl")
library(rgl)
data <- iris
mycolors <- c('royalblue1', 'darkcyan', 'oldlace')
data$color <- mycolors[ as.numeric(data$Species) ]
par(mar=c(0,0,0,0))
plot3d(
x=data$`Sepal.Length`, y=data$`Sepal.Width`, z=data$`Petal.Length`,
col = data$color,
type = 's',
radius = .1,
xlab="Sepal Length", ylab="Sepal Width", zlab="Petal Length")
writeWebGL( filename="HtmlWidget/3dscatter.html" ,  width=600, height=600)
devtools::install_github("jeromefroe/circlepackeR")
install.packages("ggraph")
library(circlepackeR)
# devtools::install_github("jeromefroe/circlepackeR") # If needed
# Let's use the 'flare dataset' (stored in the ggraph library)
library(ggraph)
data_edge <- flare$edges
data_edge$from <- gsub(".*\\.","",data_edge$from)
data_edge$to <- gsub(".*\\.","",data_edge$to)
head(data_edge)   # This is an edge list
# We need to convert it to a nested data frame. the data.tree library is our best friend for that:
library(data.tree)
install.packages("data.tree")
library(circlepackeR)
# devtools::install_github("jeromefroe/circlepackeR") # If needed
# Let's use the 'flare dataset' (stored in the ggraph library)
library(ggraph)
data_edge <- flare$edges
data_edge$from <- gsub(".*\\.","",data_edge$from)
data_edge$to <- gsub(".*\\.","",data_edge$to)
head(data_edge)   # This is an edge list
# We need to convert it to a nested data frame. the data.tree library is our best friend for that:
library(data.tree)
data_tree <- FromDataFrameNetwork(data_edge)
data_nested <- ToDataFrameTree(data_tree,
level1 = function(x) x$path[2],
level2 = function(x) x$path[3],
level3 = function(x) x$path[4],
level4 = function(x) x$path[5])[-1,-1]
data_nested <- na.omit(data_nested)
# Now we can plot it as seen before!
data_nested$pathString <- paste("roots", data_nested$level1, data_nested$level2, data_nested$level3, data_nested$level4, sep = "/")
data_nested$value=1
data_Node <- as.Node(data_nested)
p <- circlepackeR(data_Node, size = "value")
p <- circlepackeR(data_Node, size = "value")
library(circlepackeR)
# devtools::install_github("jeromefroe/circlepackeR") # If needed
# Let's use the 'flare dataset' (stored in the ggraph library)
library(ggraph)
data_edge <- flare$edges
data_edge$from <- gsub(".*\\.","",data_edge$from)
data_edge$to <- gsub(".*\\.","",data_edge$to)
head(data_edge)   # This is an edge list
# We need to convert it to a nested data frame. the data.tree library is our best friend for that:
library(data.tree)
data_tree <- FromDataFrameNetwork(data_edge)
data_nested <- ToDataFrameTree(data_tree,
level1 = function(x) x$path[2],
level2 = function(x) x$path[3],
level3 = function(x) x$path[4],
level4 = function(x) x$path[5])[-1,-1]
data_nested <- na.omit(data_nested)
# Now we can plot it as seen before!
data_nested$pathString <- paste("roots", data_nested$level1, data_nested$level2, data_nested$level3, data_nested$level4, sep = "/")
data_nested$value=1
data_Node <- as.Node(data_nested)
p <- circlepackeR(data_Node, size = "value")
p
unlink('C:/Users/oscar/Desktop/R --- SAF/Tema 5/Tema 5 --- reloaded_cache', recursive = TRUE)
install.packages("ggcharts")
library(dplyr)
library(ggplot2)
library(ggcharts)
data("biomedicalrevenue")
biomedicalrevenue %>%
filter(year %in% c(2012, 2015, 2018)) %>%
group_by(year) %>%
top_n(10, revenue) %>%
ungroup() %>%
mutate(company = tidytext::reorder_within(company, revenue, year)) %>%
ggplot(aes(company, revenue)) +
geom_col() +
coord_flip() +
tidytext::scale_x_reordered() +
facet_wrap(vars(year), scales = "free_y")
biomedicalrevenue %>%
filter(year %in% c(2012, 2015, 2018)) %>%
bar_chart(x = company, y = revenue, facet = year, top_n = 10)
data("revenue_wide")
line_chart(data = revenue_wide, x = year, y = Roche:Bayer) +
labs(x = "Year", y = "Revenue (Billion USD)")
library(dplyr)
library(ggplot2)
library(ggcharts)
data("revenue_wide")
line_chart(data = revenue_wide, x = year, y = Roche:Bayer) +
labs(x = "Year", y = "Revenue (Billion USD)")
biomedicalrevenue %>%
filter(year == 2018) %>%
lollipop_chart(x = company, y = revenue, threshold = 30) +
labs(
x = NULL,
y = "Revenue",
title = "Biomedical Companies with Revenue > $30Bn."
) +
scale_y_continuous(
labels = function(x) paste0("$", x, "Bn."),
expand = expansion(mult = c(0, .05))
)
data("popeurope")
dumbbell_chart(
data = popeurope,
x = country,
y1 = pop1952,
y2 = pop2007,
top_n = 10,
point_colors = c("lightgray", "#494F5C")
) +
labs(
x = NULL,
y = "Population",
title = "Europe's Largest Countries by Population in 2007"
) +
scale_y_continuous(
limits = c(0, NA),
labels = function(x) paste(x, "Mn.")
)
data(mtcars)
mtcars_z <- dplyr::transmute(
.data = mtcars,
model = row.names(mtcars),
hpz = scale(hp)
)
diverging_bar_chart(data = mtcars_z, x = model, y = hpz)
ggcharts_set_theme("theme_hermit")
bar_chart(data = diamonds, x = cut)
ggcharts_set_theme("theme_ng")
bar_chart(data = diamonds, x = cut)
ggcharts_set_theme("theme_nightblue")
bar_chart(data = diamonds, x = cut)
ggcharts_set_theme("theme_hermit")
bar_chart(data = diamonds, x = cut)
ggcharts_set_theme("theme_ng")
bar_chart(data = diamonds, x = cut)
ggcharts_set_theme("theme_nightblue")
bar_chart(data = diamonds, x = cut)
library(plotly)
library(plotly)
library(plotly)
x <- c(1:100)
random_y <- rnorm(100, mean = 0)
data <- data.frame(x, random_y)
fig <- plot_ly(data, x = ~x, y = ~random_y, type = 'scatter', mode = 'lines')
fig
library(highcharter)
# remotes::install_github("allisonhorst/palmerpenguins")
data(penguins, package = "palmerpenguins")
hchart(penguins, "scatter", hcaes(x = flipper_length_mm, y = bill_length_mm, group = species))
x <- c(rnorm(10000), rnorm(1000, 4, 0.5))
hchart(x, name = "data")
x <- c(rnorm(10000), rnorm(1000, 4, 0.5))
x <- as.tibble(x)
hchart(x, name = "data")
x <- c(rnorm(10000), rnorm(1000, 4, 0.5))
hchart(x, name = "data")
library(highcharter)
x <- c(rnorm(10000), rnorm(1000, 4, 0.5))
hchart(x, name = "data")
knitr::opts_chunk$set(echo = TRUE)
```{r}
library(highcharter)
x <- c(rnorm(10000), rnorm(1000, 4, 0.5))
hchart(x, name = "data")
knitr::opts_chunk$set(echo = TRUE)
suppressWarnings(library(magrittr))
suppressWarnings(library(dplyr))
suppressWarnings(library(readxl))
suppressWarnings(library(tidyr))
suppressWarnings(library(DT))
suppressWarnings(library(kableExtra))
suppressWarnings(library(formattable))
suppressWarnings(library(knitr))
suppressWarnings(library(kableExtra))
suppressWarnings(library(rpivotTable))
suppressWarnings(library(gt))
suppressWarnings(library(reactable))
suppressWarnings(library(flextable))
suppressWarnings(library(lattice))
suppressWarnings(library(ggplot2))
suppressWarnings(library(hrbrthemes))
suppressWarnings(library(viridis))
suppressWarnings(library(dygraphs))
setwd("C:/Users/oscar/Desktop/R --- SAF/Tema 5")
data <- read_excel("data.xlsx")
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyRangeSelector()
hw <- HoltWinters(ldeaths)
predicted <- predict(hw, n.ahead = 72, prediction.interval = TRUE)
dygraph(predicted, main = "Predicted Lung Deaths (UK)") %>%
dyAxis("x", drawGrid = FALSE) %>%
dySeries(c("lwr", "fit", "upr"), label = "Deaths") %>%
dyOptions(colors = RColorBrewer::brewer.pal(3, "Set1"))
knitr::opts_chunk$set(echo = TRUE)
suppressWarnings(library(magrittr))
suppressWarnings(library(dplyr))
suppressWarnings(library(readxl))
suppressWarnings(library(tidyr))
suppressWarnings(library(DT))
suppressWarnings(library(kableExtra))
suppressWarnings(library(formattable))
suppressWarnings(library(knitr))
suppressWarnings(library(kableExtra))
suppressWarnings(library(rpivotTable))
suppressWarnings(library(gt))
suppressWarnings(library(reactable))
suppressWarnings(library(flextable))
suppressWarnings(library(lattice))
suppressWarnings(library(ggplot2))
suppressWarnings(library(hrbrthemes))
suppressWarnings(library(viridis))
suppressWarnings(library(dygraphs))
suppressWarnings(library(sunburstR))
install.packages("sunburstR")
install.packages("d3r")
library(sunburstR)
packageVersion("sunburstR")
library(htmltools)
library(d3r)
dat <- data.frame(
level1 = rep(c("a", "b"), each=3),
level2 = paste0(rep(c("a", "b"), each=3), 1:3),
size = c(10,5,2,3,8,6),
stringsAsFactors = FALSE
)
knitr::kable(dat)
library(d3r)
tree <- d3_nest(dat, value_cols = "size")
tree
sb3 <- sund2b(tree, width="100%")
div(
style="display: flex; align-items:center;",
sb3
)
knitr::opts_chunk$set(echo = TRUE)
suppressWarnings(library(magrittr))
suppressWarnings(library(dplyr))
suppressWarnings(library(readxl))
suppressWarnings(library(tidyr))
suppressWarnings(library(DT))
suppressWarnings(library(kableExtra))
suppressWarnings(library(formattable))
suppressWarnings(library(knitr))
suppressWarnings(library(kableExtra))
suppressWarnings(library(rpivotTable))
suppressWarnings(library(gt))
suppressWarnings(library(reactable))
suppressWarnings(library(flextable))
suppressWarnings(library(lattice))
suppressWarnings(library(ggplot2))
suppressWarnings(library(hrbrthemes))
library(viridis)
library(highcharter)
setwd("C:/Users/oscar/Desktop/R --- SAF/Tema 5")
data <- read_excel("data.xlsx")
mpgman2 <- mpg %>%
count(class, year) %>%
glimpse()
mpgman2 <- mpg %>%
count(class, year) %>%
glimpse()
hchart(mpgman2, "column", hcaes(x = class, y = n, group = year)) %>% hc_add_theme(hc_theme_darkunica())
vignette("highcharter")
data(diamonds, mpg, package = "ggplot2")
hchart(mpg, "scatter", hcaes(x = displ, y = hwy, group = class)) %>%
hc_title(text = "Dispersión diamonds") %>%
hc_add_theme(hc_theme_economist())
hchart(mpgman2, "bar", hcaes(x = class, y = n, group = year))  %>% hc_add_theme(hc_theme_gridlight())
economics_long2 <- economics_long %>%
filter(variable %in% c("pop", "uempmed", "unemploy")) %>%
print()
hchart(economics_long2, "line", hcaes(x = date, y = value01, group = variable)) %>% hc_add_theme(hc_theme_google())
hchart(mpgman2 %>% filter(year==2008) ,
"pie",
hcaes(x = class, y = n)) %>%
hc_add_theme(hc_theme_538())
hchart(diamonds$price) %>% hc_add_theme(hc_theme_elementary())
library(quantmod)
x <- getSymbols("USD/JPY", src = "oanda", auto.assign = FALSE)
hchart(x)
library("forecast")
airforecast <- forecast(auto.arima(AirPassengers), level = 95)
hchart(airforecast) %>% hc_add_theme(hc_theme_sandsignika())
data(diamonds, package = "ggplot2")
hcboxplot(x = diamonds$x, var = diamonds$color,
name = "Length", color = "#2980b9") %>%
hc_add_theme(hc_theme_economist())
mpgman2 <- mpg %>%
count(class, year) %>%
glimpse()
hchart(mpgman2, "column", hcaes(x = class, y = n, group = year)) %>% hc_add_theme(hc_theme_darkunica())
data("favorite_bars")
data("favorite_pies")
highchart() %>%
# Data
hc_add_series(favorite_pies, "column", hcaes(x = pie, y = percent), name = "Pie") %>%
hc_add_series(favorite_bars, "pie", hcaes(name = bar, y = percent), name = "Bars") %>%
hc_add_theme(hc_theme_ffx()) %>%
# Optiosn for each type of series
hc_plotOptions(
series = list(
showInLegend = FALSE,
pointFormat = "{point.y}%"
),
column = list(
colorByPoint = TRUE
),
pie = list(
colorByPoint = TRUE, center = c('30%', '10%'),
size = 120, dataLabels = list(enabled = FALSE)
)) %>%
# Axis
hc_yAxis(
title = list(text = "percentage of tastiness"),
labels = list(format = "{value}%"), max = 100
) %>%
hc_xAxis(categories = favorite_pies$pie) %>%
# Titles and credits
hc_title(
text = "This is a bar graph describing my favorite pies
including a pie chart describing my favorite bars"
) %>%
hc_subtitle(text = "In percentage of tastiness and awesomeness") %>%
hc_credits(
enabled = TRUE, text = "Source: HIMYM",
style = list(fontSize = "12px")
)
library("forecast")
airforecast <- forecast(auto.arima(AirPassengers), level = 95)
hchart(airforecast) %>%
hc_add_theme(hc_theme_sandsignika())
mapdata <- get_data_from_map(download_map_data("countries/us/us-all"))
set.seed(1234)
data_fake <- mapdata %>%
select(code = `hc-a2`) %>%
mutate(value = 1e5 * abs(rt(nrow(.), df = 10)))
hcmap("countries/us/us-all", data = data_fake, value = "value",
joinBy = c("hc-a2", "code"), name = "Fake data",
dataLabels = list(enabled = TRUE, format = '{point.name}'),
borderColor = "#0EAD82", borderWidth = 0.1,
tooltip = list(valueDecimals = 2, valuePrefix = "$", valueSuffix = " USD"))
knitr::opts_chunk$set(echo = TRUE)
a<- seed(12345)
seed(12345)
a<- rnorm(1000)
plot(a)
a<- rnorm(1000)
plot(a)
a<- rnorm(1000)
hist(a)
dfhsdfsdkfsdkfsdkf
a <- "dfhsdfsdkfsdkfsdkf"
a <- "dfhsdfsdkfsdkfsdkf"
a
2+3
data <- 3
data <- 3
data
data2 = 3
data2
2+3
3-5
x <- 42
x
2+3
2+3
x <- 42
x
nombre <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
tipo <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet",
"Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
diametro <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)
rotacion <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)
anillos <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
planetas <- data.frame(nombre,tipo,diametro,rotacion,anillos)
planetas
nombre <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
tipo <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet",
"Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
diametro <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)
rotacion <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)
anillos <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
planetas <- data.frame(nombre,tipo,diametro,rotacion,anillos)
planetas
View(planetas)
View(planetas)
setwd("F:/Cursos/UCR Estadística/UCR Introducción al Análisis multivariado/Laboratorios/Laboratorio 3")
knitr::opts_chunk$set(echo = TRUE)
library("FactoMineR")
library("factoextra")
#library("grid")
library("REdaS")
library("corpcor")
library("GPArotation")
library("psych")
library("ggplot2")
library("MASS")
library("GGally")
library("corrplot")
library("Hmisc")
library("psych")
library("corrplot")
library("nFactors")
wine.1
corpdat1 <- cor(wine.1, use="pairwise.complete.obs")
